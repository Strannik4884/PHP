--
-- PostgreSQL database dump
--

-- Dumped from database version 11.2
-- Dumped by pg_dump version 11.2

SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET client_min_messages = warning;
SET row_security = off;

--
-- Name: checkrequestemail(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.checkrequestemail() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    declare
        date timestamp;
    begin
        -- if request with current email doesn't exist
        if not (select exists(select 1 from request where request_person_email = (select NEW.request_person_email))) then
            return NEW;
        end if;
        -- get previous request date with current email
        date := (select request_date from request where request_person_email = (select NEW.request_person_email) order by request_id desc limit 1);
        if date + interval '1 hour' <= now() then
            return NEW;
        else
          raise exception '%.', date + interval '1 hour';
        end if;
    end;
    $$;


ALTER FUNCTION public.checkrequestemail() OWNER TO postgres;

SET default_tablespace = '';

SET default_with_oids = false;

--
-- Name: request; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.request (
    request_id integer NOT NULL,
    request_date timestamp without time zone NOT NULL,
    request_person_name character varying(200) NOT NULL,
    request_person_email character varying(256) NOT NULL,
    request_person_phone character varying(16) NOT NULL,
    request_person_comment character varying(280) NOT NULL
);


ALTER TABLE public.request OWNER TO postgres;

--
-- Name: request_request_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.request_request_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.request_request_id_seq OWNER TO postgres;

--
-- Name: request_request_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.request_request_id_seq OWNED BY public.request.request_id;


--
-- Name: request request_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.request ALTER COLUMN request_id SET DEFAULT nextval('public.request_request_id_seq'::regclass);


--
-- Data for Name: request; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.request (request_id, request_date, request_person_name, request_person_email, request_person_phone, request_person_comment) FROM stdin;
\.


--
-- Name: request_request_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.request_request_id_seq', 1, false);


--
-- Name: request pk_request; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.request
    ADD CONSTRAINT pk_request PRIMARY KEY (request_id);


--
-- Name: request_pk; Type: INDEX; Schema: public; Owner: postgres
--

CREATE UNIQUE INDEX request_pk ON public.request USING btree (request_id);


--
-- Name: request add_new_request; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER add_new_request BEFORE INSERT ON public.request FOR EACH ROW EXECUTE PROCEDURE public.checkrequestemail();


--
-- PostgreSQL database dump complete
--

